trigger: none
pool:
  name: devopsagent-vm  # Custom agent pool for your VM

variables:
  # Set your environment variables for the username, password, and public IP securely
  vmUsername: 'azureuser'  # Replace with your actual VM username
  vmPassword: $(azurePassword)  # Use Azure Pipeline secrets to securely store the password
  vmPublicIp: '20.68.0.124'  # Replace with the public IP of your VM

stages:
  - stage: Build
    displayName: Build stage
    jobs:  
      - job: Build
        displayName: Build
        steps:
        - task: UseNode@1
          inputs:
            version: '16.x'  # Install Node.js version 16.x
          displayName: 'Install Node.js'
        - script: |
            npm install
            npm run build --if-present  # Optional: Only if you have a build script
            npm run test --if-present    # Optional: Only if you have a test script
          displayName: 'npm install, build and test'
        - task: ArchiveFiles@2
          displayName: 'Archive files'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)'  # Path to the working directory
            includeRootFolder: false
            archiveType: zip
            archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip  # Store as .zip
            replaceExistingArchive: true
        - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip  # Upload artifact
          artifact: drop  # Artifact name for later use


  - stage: Deploy
    displayName: 'Deploy Node.js Application'
    jobs:
      - job: Deploy
        displayName: 'Deploy'
        steps:
          - task: UseNode@1
            inputs:
              version: '16.x'
            displayName: 'Install Node.js'

          - script: |
              echo "Installing sshpass..."
              sudo apt-get update || true  # Continue even if apt-get update fails (in case it's locked)
              RETRY_COUNT=0
              MAX_RETRIES=5
              while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                sudo apt-get install -y sshpass && break || true
                echo "Attempt $((RETRY_COUNT+1)) failed, retrying..."
                RETRY_COUNT=$((RETRY_COUNT+1))
                sleep 10  # Wait 10 seconds before retrying
              done
            displayName: 'Install sshpass'

          - script: |
              echo "Starting deployment on VM..."
              sshpass -p "$(vmPassword)" scp -o StrictHostKeyChecking=no -r "$(Build.SourcesDirectory)" "$(vmUsername)"@"$(vmPublicIp)":/home/"$(vmUsername)"/app
            displayName: 'Copy files to VM'
            env:
              vmPassword: $(vmPassword)  # Pass password securely from pipeline secrets
              vmUsername: $(vmUsername)  # Pass username
              vmPublicIp: $(vmPublicIp)  # Public IP of the VM

          - script: |
              echo "Running deployment commands on the remote VM..."
              sshpass -p "$(vmPassword)" ssh -o StrictHostKeyChecking=no "$(vmUsername)"@"$(vmPublicIp)" <<EOF
                cd /home/$(vmUsername)/app
                npm install
                npm run build
                npm run start
              EOF
            displayName: 'Run deployment commands on VM'
            env:
              vmPassword: $(vmPassword)  # Pass password securely from pipeline secrets
              vmUsername: $(vmUsername)  # Pass username
              vmPublicIp: $(vmPublicIp)  # Public IP of the VM





        

                       
          
